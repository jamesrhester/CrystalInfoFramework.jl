var documenterSearchIndex = {"docs":
[{"location":"api/#API-Documentation","page":"API","title":"API Documentation","text":"","category":"section"},{"location":"api/#CIF-files","page":"API","title":"CIF files","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"A Cif is a collection of CifContainers indexed by a String label.","category":"page"},{"location":"api/#CrystalInfoFramework.Cif-Tuple{Any}","page":"API","title":"CrystalInfoFramework.Cif","text":"Cif(somepath; version=0)\n\nRead in filename s as a CIF file.  version may be 1, 2 or 0 (default) for auto-detected CIF version.\n\n\n\n\n\n","category":"method"},{"location":"api/#CrystalInfoFramework.cif_from_string-Tuple{AbstractString}","page":"API","title":"CrystalInfoFramework.cif_from_string","text":"cif_from_string(s::AbstractString; version=0, source=\"\")\n\nProcess s as the text of a CIF file. version may be 1, 2 or 0 (default) for auto-detected CIF version. If source is provided, it is a filesystem location to record as the source for s.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.keys-Tuple{Cif}","page":"API","title":"Base.keys","text":"keys(c::Cif)\n\nThe names of all blocks in c, not including any save frames.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.first-Tuple{Cif}","page":"API","title":"Base.first","text":"first(c::Cif)\n\nThe first block in c, which may not be the first block that appears in the physical file.  This is useful when only one block is present.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.length-Tuple{Cif}","page":"API","title":"Base.length","text":"length(c::Cif)\n\nThe number of blocks in n.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.haskey-Tuple{Cif, Any}","page":"API","title":"Base.haskey","text":"haskey(c::Cif,name)\n\nWhether c has a block named name.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Tuple{Cif, Any}","page":"API","title":"Base.getindex","text":"getindex(c::Cif,n)\n\nc[n] returns the block case-insensitively named n in c.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.setindex!-Tuple{Cif, Any, Any}","page":"API","title":"Base.setindex!","text":"setindex!(c::Cif,v,n)\n\nc[n] = s sets block n to v in c.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, Cif}","page":"API","title":"Base.show","text":"show(io::IO,::MIME\"text/plain\",c::Cif)\n\nDisplay a text representation of c to io. This text representation is not guaranteed to be syntactically correct CIF. To display c as a CIF file, use ::MIME\"text/cif\".\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.show-Tuple{IO, MIME{Symbol(\"text/cif\")}, Cif}","page":"API","title":"Base.show","text":"show(io::IO,::MIME\"text/cif\",c::Cif; ordering = [])\n\nWrite the contents of c as a CIF file to io, ordering each of the CifContainers according to ordering.\n\n\n\n\n\n","category":"method"},{"location":"api/#CIF-blocks","page":"API","title":"CIF blocks","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Concrete types of CifContainers are Block and CifBlock. Only the latter may contain nested save frames.  CifContainers act like Dict{String,Array{String,1}}  dictionaries indexed by data name.","category":"page"},{"location":"api/#CrystalInfoFramework.Block","page":"API","title":"CrystalInfoFramework.Block","text":"A CIF data block or save frame containing no nested save frames.\n\n\n\n\n\n","category":"type"},{"location":"api/#CrystalInfoFramework.CifBlock","page":"API","title":"CrystalInfoFramework.CifBlock","text":"A CIF block potentially containing save frames. Save frames cannot be nested.\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.keys-Tuple{CifContainer}","page":"API","title":"Base.keys","text":"keys(b::CifContainer)\n\nAll data names in b\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.haskey-Tuple{CifContainer, String}","page":"API","title":"Base.haskey","text":"haskey(b::CifContainer,s::String)\n\nReturns true if b contains a value for case-insensitive data name s\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.iterate-Tuple{CifContainer}","page":"API","title":"Base.iterate","text":"iterate(b::CifContainer)\n\nIterate over all data names in b.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Tuple{CifContainer, String}","page":"API","title":"Base.getindex","text":"getindex(b::CifContainer,s::String)\n\nb[s] returns all values for case-insensitive data name s in  b as an Array\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.get-Tuple{CifContainer, String, Any}","page":"API","title":"Base.get","text":"get(b::CifContainer,s::String,a)\n\nReturn b[s]. If s is missing, return a. s is case-insensitive.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Tuple{CifContainer, Dict}","page":"API","title":"Base.getindex","text":"getindex(b::CifContainer,s::Dict)\n\nReturn the set of values in b corresponding to the data name values provided in s. The keys of s must be datanames found in b. A DataFrame is returned. The keys of s are case-insensitive.  \n\n\n\n\n\n","category":"method"},{"location":"api/#Base.setindex!-Tuple{CifContainer, Any, Any}","page":"API","title":"Base.setindex!","text":"setindex!(b::CifContainer,v,s)\n\nSet the value of s in b to v\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.delete!-Tuple{CifContainer, Any}","page":"API","title":"Base.delete!","text":"delete!(b::CifContainer,s)\n\nRemove the value of s from b\n\n\n\n\n\n","category":"method"},{"location":"api/#Loops","page":"API","title":"Loops","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CIF blocks contain key-value pairs and loops. The following methods give access to these loops.","category":"page"},{"location":"api/#CrystalInfoFramework.get_loop","page":"API","title":"CrystalInfoFramework.get_loop","text":"get_loop(b::CifContainer,s)\n\nA DataFrame built from data items in the same loop as s. If no data are available, an empty DataFrame is returned.\n\n\n\n\n\n","category":"function"},{"location":"api/#CrystalInfoFramework.add_to_loop!","page":"API","title":"CrystalInfoFramework.add_to_loop!","text":"add_to_loop!(b::CifContainer, tgt, newname)\n\nAdd dataname newname to the loop containing tgt. Values for newname must already be present (e.g. by calling b[newname]=values) and have the same length as other  values in the loop.\n\n\n\n\n\n","category":"function"},{"location":"api/#CrystalInfoFramework.create_loop!","page":"API","title":"CrystalInfoFramework.create_loop!","text":"create_loop!(b::CifContainer,names)\n\nCreate a loop in b from the datanames in names.  Datanames  previously assigned to other loops are transferred to the new loop. All data attached to names  should have the same length.\n\n\n\n\n\n","category":"function"},{"location":"api/#Save-frames","page":"API","title":"Save frames","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CIF data files do not contain save frames, however CIF dictionaries use them extensively.  The contents of save frames are invisible to all methods except show. They can be accessed using get_frames, which returns a Cif object.","category":"page"},{"location":"api/#CrystalInfoFramework.get_frames-Tuple{CifBlock}","page":"API","title":"CrystalInfoFramework.get_frames","text":"get_frames(f::CifBlock)\n\nReturn all nested CIF containers in f as a Cif object.\n\n\n\n\n\n","category":"method"},{"location":"api/#CIF-dictionaries","page":"API","title":"CIF dictionaries","text":"","category":"section"},{"location":"api/#DDLm-Dictionaries","page":"API","title":"DDLm Dictionaries","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Dictionaries published by the International Union of Crystallography use the DDLm attribute set.","category":"page"},{"location":"api/#CrystalInfoFramework.DDLm_Dictionary","page":"API","title":"CrystalInfoFramework.DDLm_Dictionary","text":"A DDLm Dictionary holds information about data names including executable methods for deriving missing values.\n\n\n\n\n\n","category":"type"},{"location":"api/#CrystalInfoFramework.DDLm_Dictionary-Tuple{Cif}","page":"API","title":"CrystalInfoFramework.DDLm_Dictionary","text":"DDLm_Dictionary(c::Cif;ignore_imports=false)\n\nCreate a DDLm_Dictionary from c. ignore_imports = true will ignore any import attributes.\n\n\n\n\n\n","category":"method"},{"location":"api/#CrystalInfoFramework.DDLm_Dictionary-Tuple{Any}","page":"API","title":"CrystalInfoFramework.DDLm_Dictionary","text":"DDLm_Dictionary(a; ignore_imports=\"None\",\ncache_imports=false)\n\nCreate a DDLm_Dictionary given filename a.ignore_imports = :None will ignore any import attributes. Other options are :Full and :Contents to ignore imports with the respective mode, and :all to ignore all imports. cache_imports will store the contents of imported files (Contents mode only) but will not merge the contents into the importing definition.\n\nSetting ignore_imports to :None (the default) merges all information in imported files into the dictionary, replacing the import attribute.\n\nBy default imports are cached, even if they are not merged. cache_imports can be set to false to completely ignore any import attributes.\n\ncache_imports is ignored if ignore_imports is :None.\n\nIf a non-absolute location for imported dictionaries is specified, they are searched for relative to the same directory as the importing dictionary, unless import_dir is specified, in which case the search is relative to that directory.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.keys-Tuple{DDLm_Dictionary}","page":"API","title":"Base.keys","text":"keys(d::DDLm_Dictionary)\n\nReturn a list of datanames defined by the dictionary, including any aliases.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Tuple{DDLm_Dictionary, Any}","page":"API","title":"Base.getindex","text":"getindex(d::DDLm_Dictionary,k)\n\nd[k] returns the  definition for data name k as a Dict{Symbol,DataFrame} where Symbol is the attribute category (e.g. :name).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.delete!-Tuple{DDLm_Dictionary, String}","page":"API","title":"Base.delete!","text":"delete!(d::DDLm_Dictionary,k::String)\n\nRemove all information from d associated with dataname k\n\n\n\n\n\n","category":"method"},{"location":"api/#CrystalInfoFramework.get_dic_namespace-Tuple{DDLm_Dictionary}","page":"API","title":"CrystalInfoFramework.get_dic_namespace","text":"get_dic_namespace(d::DDLm_Dictionary)\n\nReturn the namespace declared by the dictionary, or ddlm if none present.\n\n\n\n\n\n","category":"method"},{"location":"api/#CrystalInfoFramework.list_aliases-Tuple{DDLm_Dictionary, Any}","page":"API","title":"CrystalInfoFramework.list_aliases","text":"list_aliases(d::DDLm_Dictionary,name;include_self=false)\n\nList aliases of name listed in d. If not include_self, remove name from the returned list.\n\n\n\n\n\n","category":"method"},{"location":"api/#CrystalInfoFramework.find_name-Tuple{DDLm_Dictionary, Any}","page":"API","title":"CrystalInfoFramework.find_name","text":"find_name(d::DDLm_Dictionary,name)\n\nFind the canonical name for name in d. If name is not present, return name unchanged.\n\n\n\n\n\n","category":"method"},{"location":"api/#CrystalInfoFramework.find_category-Tuple{DDLm_Dictionary, Any}","page":"API","title":"CrystalInfoFramework.find_category","text":"find_category(d::DDLm_Dictionary,dataname)\n\nFind the category of dataname by looking up d.\n\n\n\n\n\n","category":"method"},{"location":"api/#CrystalInfoFramework.find_object-Tuple{DDLm_Dictionary, Any}","page":"API","title":"CrystalInfoFramework.find_object","text":"find_object(d::DDLm_Dictionary,dataname)\n\nFind the object_id of dataname by looking up d.\n\n\n\n\n\n","category":"method"},{"location":"api/#CrystalInfoFramework.is_category-Tuple{DDLm_Dictionary, Any}","page":"API","title":"CrystalInfoFramework.is_category","text":"is_category(d::DDLm_Dictionary,name)\n\nReturn true if name is a category according to d.\n\n\n\n\n\n","category":"method"},{"location":"api/#CrystalInfoFramework.get_categories-Tuple{DDLm_Dictionary}","page":"API","title":"CrystalInfoFramework.get_categories","text":"get_categories(d::DDLm_Dictionary, referred=false)\n\nList all categories defined in DDLm Dictionary d. If referred is true, categories for which data names are defined, but no category is defined, are also included.\n\n\n\n\n\n","category":"method"},{"location":"api/#CrystalInfoFramework.get_keys_for_cat-Tuple{DDLm_Dictionary, Any}","page":"API","title":"CrystalInfoFramework.get_keys_for_cat","text":"get_keys_for_cat(d::DDLm_Dictionary,cat;aliases=false)\n\nList all category key data names for cat listed in d. If aliases, include alternative names for the key data names.\n\n\n\n\n\n","category":"method"},{"location":"api/#CrystalInfoFramework.get_default-Tuple{DDLm_Dictionary, Any}","page":"API","title":"CrystalInfoFramework.get_default","text":"get_default(d::DDLm_Dictionary,s)\n\nReturn the default value for s or missing if none defined. \n\n\n\n\n\n","category":"method"},{"location":"api/#CrystalInfoFramework.lookup_default-Tuple{DDLm_Dictionary, String, Any}","page":"API","title":"CrystalInfoFramework.lookup_default","text":"lookup_default(dict::DDLm_Dictionary,dataname::String,cp)\n\nIndex into any default lookup table defined in dict for dataname using an index value from cp. cp is any object with a property name as specified by def_index_id in the definition of  dataname such that cp.<def_index_id> returns a single value\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.show-Tuple{IOContext, MIME{Symbol(\"text/cif\")}, DDLm_Dictionary}","page":"API","title":"Base.show","text":"show(io::IOContext,MIME(\"text/cif\"),ddlm_dic::DDLm_Dictionary;header=\"\")\n\nOutput ddlm_dic in CIF format. header contains text that will be output in a comment box at the top of the file, which will replace any header comment stored in ddlm_dic.\n\n\n\n\n\n","category":"method"},{"location":"api/#DDL2-Dictionaries","page":"API","title":"DDL2 Dictionaries","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"DDL2 dictionaries are published and maintained by the worldwide Protein Data Bank (wwPDB).","category":"page"},{"location":"api/#CrystalInfoFramework.DDL2_Dictionary","page":"API","title":"CrystalInfoFramework.DDL2_Dictionary","text":"DDL2_Dictionary\n\nThe type of DDL2 dictionaries.\n\n\n\n\n\n","category":"type"},{"location":"api/#CrystalInfoFramework.DDL2_Dictionary-Tuple{Cif}","page":"API","title":"CrystalInfoFramework.DDL2_Dictionary","text":"DDL2_Dictionary(c::Cif)\n\nCreate a DDL2_Dictionary from c.\n\n\n\n\n\n","category":"method"},{"location":"api/#CrystalInfoFramework.DDL2_Dictionary-Tuple{Any}","page":"API","title":"CrystalInfoFramework.DDL2_Dictionary","text":"DDL2_Dictionary(a)\n\nCreate a DDL2_Dictionary given filename a.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.keys-Tuple{DDL2_Dictionary}","page":"API","title":"Base.keys","text":"keys(d::DDL2_Dictionary)\n\nReturn a list of datanames defined by the dictionary, including any aliases.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Tuple{DDL2_Dictionary, Any}","page":"API","title":"Base.getindex","text":"getindex(d::DDL2_Dictionary,k)\n\nd[k] returns the  definition for data name k as a Dict{Symbol,DataFrame} where Symbol is the attribute category (e.g. :item_name).\n\n\n\n\n\n","category":"method"},{"location":"api/#CrystalInfoFramework.get_categories-Tuple{DDL2_Dictionary}","page":"API","title":"CrystalInfoFramework.get_categories","text":"get_categories(d::DDL2_Dictionary; referred = false)\n\nList all categories defined in d. If referred is true, categories for which data names are defined, but no category is defined, are also included.\n\n\n\n\n\n","category":"method"},{"location":"api/#CrystalInfoFramework.get_default-Tuple{DDL2_Dictionary, Any}","page":"API","title":"CrystalInfoFramework.get_default","text":"get_default(d::DDL2_Dictionary,dataname)\n\nReturn the default value for dataname or missing if none defined. \n\n\n\n\n\n","category":"method"},{"location":"api/#Base.show-Tuple{IOContext, MIME{Symbol(\"text/cif\")}, DDL2_Dictionary}","page":"API","title":"Base.show","text":"show(io::IOContext,::MIME\"text/cif\",ddl2_dic::DDL2_Dictionary)\n\nOutput ddl2_dic in CIF format. IOContext can be used to control the output layout using the following keywords:\n\nstrict: follow the IUCr layout rules\n\n\n\n\n\n","category":"method"},{"location":"#CrystalInfoFramework.jl","page":"Overview","title":"CrystalInfoFramework.jl","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"This module implements the International Union of Crystallography's  Crystallographic Information Framework (CIF) standard for CIF file syntax and CIF dictionary construction.","category":"page"},{"location":"tutorial/#Guide","page":"Guide","title":"Guide","text":"","category":"section"},{"location":"tutorial/","page":"Guide","title":"Guide","text":"The CIF files used in these examples are provided in the docs directory.","category":"page"},{"location":"tutorial/#Reading-a-CIF-file","page":"Guide","title":"Reading a CIF file","text":"","category":"section"},{"location":"tutorial/","page":"Guide","title":"Guide","text":"To open CIF file demo.cif, and read _cell.length_a from block saly2_all_aniso:","category":"page"},{"location":"tutorial/","page":"Guide","title":"Guide","text":"\nusing CrystalInfoFramework\n\nnc = Cif(\"demo.cif\")\nmy_block = nc[\"saly2_all_aniso\"]  #could also use first(nc).second\nmy_block[\"_cell.length_a\"]\n\n# output\n\n1-element Vector{String}:\n \"11.520(12)\"","category":"page"},{"location":"tutorial/","page":"Guide","title":"Guide","text":"Note that values are always returned as Array type, with the value for a key value pair being a single-element array. The values in the arrays returned are either String, Missing (CIF ?), Nothing (CIF .) or compound types Dict and Array which are only available for CIF2 syntax files.","category":"page"},{"location":"tutorial/#Loops","page":"Guide","title":"Loops","text":"","category":"section"},{"location":"tutorial/","page":"Guide","title":"Guide","text":"Individual columns are returned when the data name is requested, as above.","category":"page"},{"location":"tutorial/","page":"Guide","title":"Guide","text":"get_loop returns a DataFrame object that can be manipulated using the  methods of that package, most obviously, eachrow to iterate over the packets in a loop. To specify the required loop, simply provide any  data name that appears in the loop.","category":"page"},{"location":"tutorial/","page":"Guide","title":"Guide","text":"\nl = get_loop(my_block,\"_atom_site.label\");\n\nfor r in eachrow(l)\n    println(\"$(r[Symbol(\"_atom_site.fract_x\")])\")\nend\n\n# output\n\n.5505(5)\n.4009(5)\n.2501(5)\n.4170(7)\n.3145(7)\n.2789(8)\n.3417(9)\n.4445(9)\n.4797(8)\n.4549(7)","category":"page"},{"location":"tutorial/#Updating-a-CIF-file","page":"Guide","title":"Updating a CIF file","text":"","category":"section"},{"location":"tutorial/","page":"Guide","title":"Guide","text":"Single key-value pairs are added in the same way as for a normal dictionary. ","category":"page"},{"location":"tutorial/","page":"Guide","title":"Guide","text":"my_block[\"_new_item\"] = \"a fine item\"\nmy_block[\"_number_item\"] = 23","category":"page"},{"location":"tutorial/","page":"Guide","title":"Guide","text":"If the dataname belongs to a loop, a two-step process is required to add the values. First the column of values for the new data name is added as above, and then the new dataname can be added to a previously-existing  loop. The following call adds _new_loop_item to the loop containing  _old_item:","category":"page"},{"location":"tutorial/","page":"Guide","title":"Guide","text":"my_block[\"_new_loop_item\"] = [1,2,3,4]\nadd_to_loop!(my_block,\"_old_item\",\"_new_loop_item\")","category":"page"},{"location":"tutorial/","page":"Guide","title":"Guide","text":"The number of values in the array assigned to _new_loop_item must match the length of the loop it is added to - this is checked.","category":"page"},{"location":"tutorial/","page":"Guide","title":"Guide","text":"A completely new loop can be created with create_loop!.  The columns corresponding to the data names provided to create_loop! must  have previously been added to the data block, just like for add_to_loop!.","category":"page"},{"location":"tutorial/#Writing-CIFs","page":"Guide","title":"Writing CIFs","text":"","category":"section"},{"location":"tutorial/","page":"Guide","title":"Guide","text":"To write a CIF, open an IO stream and write the contents of the Cif object as MIME type \"text/cif\":","category":"page"},{"location":"tutorial/","page":"Guide","title":"Guide","text":"t = open(\"newcif.cif\",\"w\")\nshow(t,MIME(\"text/cif\"),mycif)\nclose(t)","category":"page"},{"location":"tutorial/","page":"Guide","title":"Guide","text":"Note that currently no checks are made for correct construction of data names (e.g. leading underscore and characterset restrictions). This will be checked in the future.","category":"page"},{"location":"tutorial/#Dictionaries","page":"Guide","title":"Dictionaries","text":"","category":"section"},{"location":"tutorial/","page":"Guide","title":"Guide","text":"CIF dictionaries are created by passing the dictionary file name to DDLm_Dictionary or DDL2_Dictionary constructors.  Note that DDL2 dictionaries are published by the Protein Data Bank (wwPDB) and DDLm dictionaries are used by the IUCr.","category":"page"},{"location":"tutorial/","page":"Guide","title":"Guide","text":"d = DDLm_Dictionary(\"cif_core.dic\")","category":"page"}]
}
