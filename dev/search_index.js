var documenterSearchIndex = {"docs":
[{"location":"api/#API-Documentation","page":"API Documentation","title":"API Documentation","text":"","category":"section"},{"location":"api/#CIF-files","page":"API Documentation","title":"CIF files","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"A Cif is a collection of CifContainers indexed by a String label.","category":"page"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"Cif(s::AbstractString;verbose=false)\nkeys(c::Cif)\nfirst(c::Cif)\nlength(c::Cif)\nhaskey(c::Cif,name)\ngetindex(c::Cif,n)\nsetindex!(c::Cif,v,n)\nshow(io::IO,::MIME\"text/plain\",c::Cif)","category":"page"},{"location":"api/#CrystalInfoFramework.Cif-Tuple{AbstractString}","page":"API Documentation","title":"CrystalInfoFramework.Cif","text":"Cif(s::AbstractString;verbose=false)\n\nRead in filename s as a CIF file. If verbose is true, print progress information during parsing.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.keys-Tuple{Cif}","page":"API Documentation","title":"Base.keys","text":"keys(c::Cif)\n\nThe names of all blocks in c, not including any save frames.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.first-Tuple{Cif}","page":"API Documentation","title":"Base.first","text":"first(c::Cif)\n\nThe first block in c, which may not be the first block that appears in the physical file.  This is useful when only one block is present.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.length-Tuple{Cif}","page":"API Documentation","title":"Base.length","text":"length(c::Cif)\n\nThe number of blocks in n.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.haskey-Tuple{Cif,Any}","page":"API Documentation","title":"Base.haskey","text":"haskey(c::Cif,name)\n\nWhether c has a block named name.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Tuple{Cif,Any}","page":"API Documentation","title":"Base.getindex","text":"getindex(c::Cif,n)\n\nc[n] returns the block named n in c.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.setindex!-Tuple{Cif,Any,Any}","page":"API Documentation","title":"Base.setindex!","text":"setindex!(c::Cif,v,n)\n\nc[n] = s sets block n to v in c.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.show-Tuple{IO,MIME{Symbol(\"text/plain\")},Cif}","page":"API Documentation","title":"Base.show","text":"show(io::IO,::MIME\"text/plain\",c::Cif)\n\nDisplay a text representation of c to io. This text representation is not guaranteed to be syntactically correct CIF. To display c as a CIF file, use ::MIME\"text/cif\".\n\n\n\n\n\n","category":"method"},{"location":"api/#CIF-blocks","page":"API Documentation","title":"CIF blocks","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"Concrete types of CifContainers are Block and CifBlock. Only the latter may contain nested save frames.  CifContainers act like Dict{String,Array{CifValue,1}}  dictionaries indexed by data name.","category":"page"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"Block\nCifBlock\nkeys(b::CifContainer)\nhaskey(b::CifContainer,s::String)\niterate(b::CifContainer)\ngetindex(b::CifContainer,s::String)\nget(b::CifContainer,s::String,a)\ngetindex(b::CifContainer,s::Dict)\nsetindex!(b::CifContainer,v,s)\ndelete!(b::CifContainer,s)","category":"page"},{"location":"api/#CrystalInfoFramework.Block","page":"API Documentation","title":"CrystalInfoFramework.Block","text":"A CIF data block or save frame containing no nested save frames.\n\n\n\n\n\n","category":"type"},{"location":"api/#CrystalInfoFramework.CifBlock","page":"API Documentation","title":"CrystalInfoFramework.CifBlock","text":"A CIF block potentially containing save frames.\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.keys-Tuple{CifContainer}","page":"API Documentation","title":"Base.keys","text":"keys(b::CifContainer)\n\nAll data names in b\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.haskey-Tuple{CifContainer,String}","page":"API Documentation","title":"Base.haskey","text":"haskey(b::CifContainer,s::String)\n\nReturns true if b contains a value for case-insensitive data name s\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.iterate-Tuple{CifContainer}","page":"API Documentation","title":"Base.iterate","text":"iterate(b::CifContainer)\n\nIterate over all data names in b.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Tuple{CifContainer,String}","page":"API Documentation","title":"Base.getindex","text":"getindex(b::CifContainer,s::String)\n\nb[s] returns all values for case-insensitive data name s in  b as an Array{CifValue,1}\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.get-Tuple{CifContainer,String,Any}","page":"API Documentation","title":"Base.get","text":"get(b::CifContainer,s::String,a)\n\nReturn b[s]. If s is missing, return a. s is case-insensitive.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Tuple{CifContainer,Dict}","page":"API Documentation","title":"Base.getindex","text":"getindex(b::CifContainer,s::Dict)\n\nReturn the set of values in b corresponding to the data name values provided in s. The keys of s must be datanames found in b. A DataFrame is returned. The keys of s are case-insensitive.  \n\n\n\n\n\n","category":"method"},{"location":"api/#Base.setindex!-Tuple{CifContainer,Any,Any}","page":"API Documentation","title":"Base.setindex!","text":"setindex!(b::CifContainer,v,s)\n\nSet the value of s in b to v\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.delete!-Tuple{CifContainer,Any}","page":"API Documentation","title":"Base.delete!","text":"delete!(b::CifContainer,s)\n\nRemove the value of s from b\n\n\n\n\n\n","category":"method"},{"location":"api/#CIF-values","page":"API Documentation","title":"CIF values","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"Data names are associated with arrays of values of type CifValue.  Single-valued data names are associated with arrays with a single element.","category":"page"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"CifValue","category":"page"},{"location":"api/#CrystalInfoFramework.CifValue","page":"API Documentation","title":"CrystalInfoFramework.CifValue","text":"The syntactical type of data held in a CIF file. A value is of type String, Vector{CifValue}, Dict{String,CifValue}, Missing or Nothing. In all cases the values returned for a given data name are in an  Array{CifValue,1}. \n\n\n\n\n\n","category":"type"},{"location":"api/#Loops","page":"API Documentation","title":"Loops","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"CIF blocks contain key-value pairs and loops. The following methods give access to these loops.","category":"page"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"get_loop\nadd_to_loop!\ncreate_loop!","category":"page"},{"location":"api/#CrystalInfoFramework.get_loop","page":"API Documentation","title":"CrystalInfoFramework.get_loop","text":"get_loop(b::CifContainer,s)\n\nA DataFrame built from data items in the same loop as s. If no data are available, an empty DataFrame is returned.\n\n\n\n\n\n","category":"function"},{"location":"api/#CrystalInfoFramework.add_to_loop!","page":"API Documentation","title":"CrystalInfoFramework.add_to_loop!","text":"add_to_loop!(b::CifContainer, tgt, newname)\n\nAdd dataname tgt to the loop containing newname. Values for tgt must already be present (e.g. by calling b[tgt]=values) and have the same length as other  values in the loop.\n\n\n\n\n\n","category":"function"},{"location":"api/#CrystalInfoFramework.create_loop!","page":"API Documentation","title":"CrystalInfoFramework.create_loop!","text":"create_loop!(b::CifContainer,names::Array{String,1})\n\nCreate a loop in b from the datanames in names.  Datanames  previously assigned to other loops are transferred to the new loop. All data attached to names  should have the same length.\n\n\n\n\n\n","category":"function"},{"location":"api/#Save-frames","page":"API Documentation","title":"Save frames","text":"","category":"section"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"CIF data files do not contain save frames, however CIF dictionaries use them extensively.  The contents of save frames are invisible to all methods except show. They can be accessed using get_frames, which returns a Cif object.","category":"page"},{"location":"api/","page":"API Documentation","title":"API Documentation","text":"get_frames(f::CifBlock{V}) where V","category":"page"},{"location":"api/#CrystalInfoFramework.get_frames-Union{Tuple{CifBlock{V}}, Tuple{V}} where V","page":"API Documentation","title":"CrystalInfoFramework.get_frames","text":"get_frames(f::CifBlock{V})\n\nReturn all nested CIF containers in f as a Cif object.\n\n\n\n\n\n","category":"method"},{"location":"#CrystalInfoFramework.jl","page":"CrystalInfoFramework.jl","title":"CrystalInfoFramework.jl","text":"","category":"section"},{"location":"","page":"CrystalInfoFramework.jl","title":"CrystalInfoFramework.jl","text":"This module implements the International Union of Crystallography's  Crystallographic Information Framework (CIF) standard for CIF file syntax and CIF dictionary construction.","category":"page"}]
}
